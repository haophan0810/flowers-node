- const validUsername = validationErrors.find( e => e.param === 'username')
- const validEmail = validationErrors.find( e => e.param === 'email')
- const validPassword = validationErrors.find( e => e.param === 'password')
- const validConfirmPassword = validationErrors.find( e => e.param === 'confirmPassword')


doctype html
head
    title #{title}
    // Required meta tags
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
    //fontawesome
    link(rel='stylesheet', href='https://use.fontawesome.com/releases/v5.6.3/css/all.css', integrity='sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/', crossorigin='anonymous')

    // Bootstrap CSS
    link(rel='stylesheet', href='https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css', integrity='sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO', crossorigin='anonymous')
    link(rel='stylesheet', href='css/style.css')
    link(rel="stylesheet", href="../css/register.css")

body    
    .container
    .row
        .col-lg-10.col-xl-9.mx-auto
            .card.card-signin.flex-row.my-5
                .card-img-left.d-none.d-md-flex
                // Background image for card set in CSS!
                .card-body
                    h5.card-title.text-center Register
                    form.form-signin(method='POST' action='/register' novalidate)
                        .form-label-group
                            input#inputUserame.form-control(type='text'
                                placeholder='Username'
                                required=''
                                autofocus=''
                                name='username'
                                value= oldData.username
                            )
                            label(for='inputUserame') Username
                            .errorValidate(class= validUsername ? "errorActive" : "") 
                                |#{ validUsername ? validUsername.msg : ""}
                        .form-label-group
                            input#inputEmail.form-control(type='email'
                                placeholder='Email address'
                                required=''
                                name='email'
                                value= oldData.email
                            )
                            label(for='inputEmail') Email address
                            .errorValidate(class= validEmail ? "errorActive" : "") 
                                |#{ validEmail ? validEmail.msg : ""}
                            .errorValidate(class= validRegister ? "errorActive" : "") 
                                |#{ validRegister ? validRegister : ""}
                        hr
                        .form-label-group
                            input#inputPassword.form-control(type='password'
                                placeholder='Password'
                                required=''
                                name='password'
                                value= oldData.password    
                            )
                            label(for='inputPassword') Password
                            .errorValidate(class= validPassword ? "errorActive" : "") 
                                |#{ validPassword ? validPassword.msg : ""}
                        .form-label-group
                            input#inputConfirmPassword.form-control(type='password'
                                placeholder='Password'
                                name='confirmPassword'
                                required=''
                                value= oldData.confirmPassword
                            )
                            label(for='inputConfirmPassword') Confirm password
                            .errorValidate(class= validConfirmPassword ? "errorActive" : "") 
                                |#{ validConfirmPassword ? validConfirmPassword.msg : ""}
                        button.btn.btn-lg.btn-primary.btn-block.text-uppercase(type='submit') Register
                        .text-or.text-center.mt-3.text-uppercase or
                        a.d-block.text-center.mt-2.btn-lg.btn-warning.btn-block.text-uppercase.route-log(href='/login') Login
                        
                        hr.my-4
                        button.btn.btn-lg.btn-google.btn-block.text-uppercase(type='submit')
                            i.fab.fa-google.mr-2
                            |  Sign up with Google
                        button.btn.btn-lg.btn-facebook.btn-block.text-uppercase(type='submit')
                            i.fab.fa-facebook-f.mr-2
                            |  Sign up with Facebook

    script(src='https://code.jquery.com/jquery-3.3.1.slim.min.js', integrity='sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo', crossorigin='anonymous')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js', integrity='sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49', crossorigin='anonymous')
    script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js', integrity='sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy', crossorigin='anonymous')
    script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.bundle.min.js', integrity='sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy', crossorigin='anonymous')
    //- script(src='./js/validateRegister.js')
